---
import SpaConfig from "../../yukina.config";
import { GetCoverURLForUnspecifiedEntry } from "../utils/cover";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";

export interface Props {
  title?: string;
  subTitle?: string;
  bannerImage?: string;
  slug?: string;
}

const { title, subTitle, bannerImage, slug } = Astro.props;

let currentBannerImage = bannerImage;
if (currentBannerImage == undefined && slug != undefined) {
  currentBannerImage = GetCoverURLForUnspecifiedEntry(slug);
}
---

<div class="banner relative isolate w-full select-none pt-16">
  {currentBannerImage && (
    <Image
      class="banner-img pointer-events-none absolute left-0 top-0 z-[-10] h-full w-full object-cover object-center opacity-50 transition-all dark:opacity-[var(--banner-dark-opacity)]"
      src={currentBannerImage}
      alt="Banner Image"
      width={1920}
      height={1080}
      format="webp"
    />
  )}
  <div class="banner-overlay pointer-events-none absolute"></div>

  <div class="banner-content mx-auto w-full py-12 text-center text-black">
    <h1 class="title">{title ?? SpaConfig.title}</h1>
    {subTitle && <h2 class="subtitle">{subTitle ?? SpaConfig.subTitle}</h2>}
  </div>

  <div class="waves-container absolute bottom-0 left-0 w-full">
    <svg
      class="waves-svg"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      viewBox="0 24 150 28"
      preserveAspectRatio="none"
      shape-rendering="auto"
    >
      <defs>
        <path
          id="gentle-wave"
          d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"
        ></path>
      </defs>
      <g class="parallax">
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="0"
          class="wave wave1"
        ></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="3"
          class="wave wave2"
        ></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="5"
          class="wave wave3"
        ></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="7"
          class="wave wave4"
        ></use>
      </g>
    </svg>
  </div>
</div>

<style>
  .banner {
    @apply relative isolate w-full select-none pt-16 overflow-visible;
    @apply h-[calc(var(--banner-height)*3/4)] opacity-100 lg:h-[var(--banner-height)];
    min-height: var(--banner-height);
    position: relative;
  }

  .title {
    @apply mt-8 text-center font-bold text-[var(--title-color)] drop-shadow-lg lg:mt-1;
    font-family: var(--title-font);
  }

  .title-index {
    @apply mb-0 text-6xl leading-[5rem] lg:mb-1 lg:text-8xl;
  }

  .title-normal {
    @apply mb-1 text-3xl lg:text-5xl;
  }

  .subtitle {
    @apply text-center text-xl text-[var(--subtitle-color)] drop-shadow-md lg:text-3xl;
    font-family: var(--subtitle-font);
  }

  .waves-container {
    height: 15vh;
    min-height: 100px;
    max-height: 150px;
    z-index: 5;
  }

  .waves-svg {
    height: 100%;
    width: 100%;
  }

  .parallax > use {
    animation: move-forever 25s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;
  }

  .wave1 {
    animation-delay: -2s;
    animation-duration: 7s;
    fill: #B9AFC1B3;
  }

  .wave2 {
    animation-delay: -3s;
    animation-duration: 10s;
    fill: #F5D6D199;
  }

  .wave3 {
    animation-delay: -4s;
    animation-duration: 13s;
    fill: #F4F2E980;
  }

  .wave4 {
    animation-delay: -5s;
    animation-duration: 20s;
    fill: var(--background-color-light);
  }

  @keyframes move-forever {
    0% {
      transform: translate3d(-90px, 0, 0);
    }
    100% {
      transform: translate3d(85px, 0, 0);
    }
  }

  @keyframes banner-onload-animation {
    0% {
      opacity: 0;
      height: calc(var(--banner-height) + 4rem);
    }
    100% {
      opacity: 1;
      height: var(--banner-height);
    }
  }
</style>

<script>
</script>
